@page "/addCharacter"
@page "/addCharacter/{IdCharacter:int}"



@inject SweetAlertService Swal;
@inject ICharacters Characters; 
@inject IClan Clans;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JS;


<h3>@title</h3>

<EditForm Model="listCharacter">
    <div class="mb-5" >
        <img class="mb-1 "
             src="@imageUrl"
             alt="Character Image"
             width="200"
             height="150" >

        <InputFile 
            class="form-control mb-4" 
            OnChange="OnFileChange" 
            accept="image/png, image/jpeg, image/webp" />

    </div>
   
    <div class="mb-3">

        <label>First Name</label>

        <InputText 
            @bind-Value="listCharacter.FirstName" 
            class="form-control" />
    </div>

    <div class="mb-3">
        <label>Clan</label>
        <InputSelect 
            class="form-select" 
            @bind-Value="listCharacter.IdClan">

            <option>-- SELECT --</option>

            @foreach (var item in listClan)
            {
                <option  value="@item.IdClan"> @item.ClanName</option>
            }
        </InputSelect>
        
    </div>

    <div class="mb-3">
        <label>Age</label>
        <InputNumber 
            @bind-Value="listCharacter.Age" 
            class="form-control" />
    </div>

    <button 
        type="submit" 
        class="btn btn-primary" 
        @onclick="(() => SaveCharacter())">
        @btntitle
    </button>

    <button type="submit"
            class="btn btn-outline-primary"
            @onclick="(() => ResetField())">
        Cancel
    </button>
   

</EditForm>


@code {
    [Parameter]
    public int IdCharacter { get; set; } = 0;

    string imageUrl = null!;
    string title = string.Empty;
    string btntitle = string.Empty;
    bool _isEdit;

    private string base64String = null!;

    CharactersDTO listCharacter = new CharactersDTO();
    List<ClanDTO> listClan = new List<ClanDTO>();



    protected override async Task OnInitializedAsync()
    {

        if (IdCharacter != 0)
        {
            listCharacter = await Characters.Character_GET(IdCharacter);
            title = "Edit Character";
            btntitle = "Edit";
            imageUrl = ImageLoad.TOPNG(listCharacter.Image);
            listClan = await Clans.Clan_GETS();
        } else
        {
            title = "Add Character";
            btntitle = "Add";
            imageUrl = "https://i.postimg.cc/DwwLdcy1/Jujutsu-Kaisen-logo.png";
            listClan = await Clans.Clan_GETS();
        }
    }

    private async Task SaveCharacter()
    {
        if (Validationes() == false)
        {
            await Swal.FireAsync("Error", "All fields are required", SweetAlertIcon.Error);
            return;
        } else
        {
            if (IdCharacter != 0)
            {
                var newCharacter = new CharactersDTO
                        {
                            IdCharacter = IdCharacter,
                            FirstName = listCharacter.FirstName,
                            IdClan = listCharacter.IdClan,
                            Age = listCharacter.Age,
                            Image = _isEdit == true ? base64String : listCharacter.Image
                        };

                await Characters.Character_PUT(newCharacter, IdCharacter);
                ResetField();
                NavigationManager.NavigateTo("/");
            }
            else
            { 
                if (base64String == null)
                {
                    await Swal.FireAsync("Error", "Imagen is Requered", SweetAlertIcon.Error);
                    return;
                } else
                {
                    var newCharacter = new CharactersDTO
                        {
                            IdCharacter = IdCharacter,
                            FirstName = listCharacter.FirstName,
                            IdClan = listCharacter.IdClan,
                            Age = listCharacter.Age,
                            Image = base64String
                        };

                    await Characters.Character_POST(newCharacter);
                    ResetField();
                    NavigationManager.NavigateTo("/");
                }
        
            }
        }


    }


    private void ResetField()
    {
        listCharacter = new CharactersDTO();
        title = "Add Character";
        btntitle = "Add";
        imageUrl = "https://i.postimg.cc/DwwLdcy1/Jujutsu-Kaisen-logo.png";
        IdCharacter = 0;
        base64String = null!;
        _isEdit = false;
    }


    private async Task OnFileChange(InputFileChangeEventArgs e)
    {
        try
        {
            _isEdit = true;
            var file = e.File;

            using (var memoryStream = new MemoryStream())
            {
                await file.OpenReadStream().CopyToAsync(memoryStream);

                var fileBytes = memoryStream.ToArray();

                imageUrl = $"data:{file.ContentType};base64,{Convert.ToBase64String(fileBytes)}";
                base64String = Convert.ToBase64String(fileBytes);
            }
        }
        catch (Exception ex)
        {
            // Maneja la excepción aquí, por ejemplo, mostrando un mensaje de error
            Console.WriteLine($"Error al procesar la imagen: {ex.Message}");
        }
    }

    private bool Validationes ()
    {
        if (listCharacter.FirstName == null)
        {
            return false;
        }
        else if (listCharacter.IdClan == 0)
        {
            return false;
        }
        else if (listCharacter.Age == 0)
        {
            return false;
        }
        else
        {
            return true;
        }
    
    }
}